import org.junit.Test;

import junit.framework.Assert;

public class HW_02_Color_of_chessboard_square {
	
	@Test
	public void test1()
	{
		Assert.assertEquals(false, squareIsWhite("a1"));
	}
	
	@Test
	public void test2()
	{
		Assert.assertEquals(true, squareIsWhite("h3"));
	}
	
	@Test
	public void test3()
	{
		Assert.assertEquals(false,squareIsWhite("c7"));
	}
	public boolean return_colour_of_coordinate(String coordinate)

	{
		int num1 = (int)(coordinate.charAt(0)-'a'+1);
		int num2 = (int)(coordinate.charAt(1)-'1'+1);
		
		if((num1+num2)%2!=0)
		{
			return true;
		}
		
		return false;
	}
	
	 public boolean squareIsWhite(String chess_coordinates) {

	        boolean flag = true;
			
			//String chess_coordinates="a1";
			int a=Integer.parseInt(String.valueOf(chess_coordinates.charAt(1)));
			System.out.println(a);
			
			if((chess_coordinates.charAt(0)=='a')||(chess_coordinates.charAt(0)=='c')||
					(chess_coordinates.charAt(0)=='e')||(chess_coordinates.charAt(0)=='g'))
			{
				if(a%2!=0)
				{
					flag = false;
				}
			}
			
			else if 
			((chess_coordinates.charAt(0)=='b')||(chess_coordinates.charAt(0)=='d')||
					(chess_coordinates.charAt(0)=='f')||(chess_coordinates.charAt(0)=='h'))
			{
				if(a%2==0)
				{
					flag = false;
				}
			}
			
			System.out.println(flag);
			return flag;
	        
	    }
}


/* https://leetcode.com/problems/determine-color-of-a-chessboard-square/description/
 
Determine Color of a Chessboard Square
You are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.

Return true if the square is white, and false if the square is black.

The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.

Example 1:

Input: coordinates = "a1"
Output: false
Explanation: From the chess-board above, the square with coordinates "a1" is black, so return false.
Example 2:

Input: coordinates = "h3"
Output: true
Explanation: From the chess-board above, the square with coordinates "h3" is white, so return true.
Example 3:

Input: coordinates = "c7"
Output: false
 
-------------------------------------------------------------------------------------------------------
Input : String having two characters 
first character will range from a to h ; 
second character will be a number within the range 1 to 8 ;

Output : Boolean flag 
flag - true for white square 
flag - false for black square 
-------------------------------------------------------------------------------------------------------

Pseudo Code - 

Black colour is observed at coordinates having 
Either 
{rows as - a,c,e,g and columns as - 1,3,5,7 }
or 
{rows as - b,d,f,h and columns as - 2,4,6,8 }
 
 convert a-h as 1-8 numbers respectively 
 
 Black appears in combination of {odd,odd} and {even,even}Remember sum of two odd numbers and two even numbers is always even number 
 White is appearing always at (odd,even) (even,odd) sum will be always be odd 
  
  Step 1 - Convert the to chars in the string as separate int num1 and int  num2 
  Step 2 - Addition of both num1 and num 2 
  Step 3 - If sum is odd -> return true (White) If sum is even -> return false (Black)
  
  New learning convert char to int value for alphabet and number using below syntax - 
  String chess_coordinates="a4";
		
		int num1 = (int)(chess_coordinates.charAt(0)-'a'+1);
		System.out.println(chess_coordinates.charAt(0)-'a');
		System.out.println(chess_coordinates.charAt(0)-'a'+1);
		
		int num2 = (int)(chess_coordinates.charAt(0)-'1'+1);
		System.out.println(chess_coordinates.charAt(0)-'1');
		System.out.println(chess_coordinates.charAt(0)-'1'+1);
 
 */
 
