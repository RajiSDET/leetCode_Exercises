import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;

public class HW_01_Self_dividing_number {
	
	@Test 
	public void test1()
	{
		List<Integer> expected = new ArrayList<Integer>(Arrays.asList(1,2,3,4,5,6,7,8,9,11,12,15,22));
        Assert.assertEquals(expected, self_divider_num_list(1,22));
	}
	
	@Test 
	public void test2()
	{
		List<Integer> expected = new ArrayList<Integer>(Arrays.asList(48,55,66,77));
        Assert.assertEquals(expected, self_divider_num_list(47,85));
	}
	
	
	public List<Integer> self_divider_num_list(int left,int right)
	{
		
		List<Integer> outputlist = new ArrayList<Integer>();
		for (int num =left;num<=right;num++)
	    {
	    	boolean flag = false ;
	    	String tempstring = Integer.toString(num);
	    	int[] intArray = new int[tempstring.length()];
	    	for (int i = 0; i < tempstring.length(); i++)
			{
				intArray[i] = tempstring.charAt(i) - '0';
			}
	    	
	    	for (int eachint:intArray)
	    	{
	    		if(eachint==0)
	    		{   
	    			flag = false;
	    			break;
	    		}
	    		else if(num%eachint!=0)
	    		{
	    			
	    			flag = false;
	    			break;
	    		}
	    		else if(num%eachint==0)
	    		{
	    			
	    			flag = true;
	    			continue;
	    		}
	    		    		
	    	}
	    	if(flag)
	    	{
	    		outputlist.add(num);
	    	}
	    	
	    }
		return outputlist;
	}

}

/*
 https://leetcode.com/problems/self-dividing-numbers/
 
 728. Self Dividing Numbers
Easy
1.6K
361
Companies
A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.
A self-dividing number is not allowed to contain the digit zero.

Given two integers left and right, return a list of all the self-dividing numbers in the range [left, right].

Example 1:

Input: left = 1, right = 22
Output: [1,2,3,4,5,6,7,8,9,11,12,15,22]

Example 2:
Input: left = 47, right = 85
Output: [48,55,66,77]
 
PSUEDO CODE 

Input int left , int right 
Output List <Integer>[]

loop range from left to right 
for each number from this range 
convert each number to an array of int[]
set flag = false 
if array element is zero -> flag remains as false and break 
for all elements in the array -> check if num%elementinarray==0 if it not - let flag remain false and  break
 if yes set the flag the true ->  return that number and add this number to a list  
 
 */
